pipeline {
    agent any

    environment {
        EMAIL_RECIPIENT = 'joshpjman@gmail.com'
        EMAIL_SENDER = 's220254185@deakin.edu.au'
    }

    stages {
        stage('Build') {
            steps {
                script {
                    echo 'Building the code using Bun...'
                    echo 'bun run build'
                }
            }
        }

        stage('Unit and Integration Tests') {
            steps {
                script {
                    echo 'Running unit and integration tests...'
                    echo 'bun test'
                }
            }
        }

        stage('Code Analysis') {
            steps {
                script {
                    echo 'Integrating code analysis, executing eslint test...'
                    echo 'bun run lint'
                }
            }
        }

        stage('Security Scan') {
            steps {
                script {
                    echo 'Performing security scan, executing snyk test...'
                    echo 'bun run security-scan'
                }
            }
        }

        stage('Deploy to Staging') {
            steps {
                script {
                    echo 'Deploying to staging server...'
                    sleep(1)
                    echo 'Deployed to AWS EC2!'
                }
            }
        }

        stage('Integration Tests on Staging') {
            steps {
                script {
                    echo 'Running integration tests on staging...'
                    sleep(1)
                    echo 'Tests passed (exited 0)!'
                }
            }
        }

        stage('Deploy to Production') {
            steps {
                script {
                    echo 'Deploying to production server...'
                    sleep(1)
                    echo 'Deployed to AWS EC2!'
                }
            }
        }
    }

    post {
        always {
            script {
                def logFile = "${env.WORKSPACE}/build-log.txt"
                writeFile file: logFile, text: currentBuild.rawBuild.getLog(2000).join('\n')
                
                emailext (
                    to: EMAIL_RECIPIENT,
                    from: EMAIL_SENDER,
                    subject: "Jenkins Pipeline - ${currentBuild.projectName} (#${currentBuild.id})",
                    body: "The pipeline has finished running. Status: ${currentBuild.currentResult}\n\nDuration: ${currentBuild.duration} ms",
                    attachmentsPattern: "build-log.txt",
                )
            }
        }
    }
}